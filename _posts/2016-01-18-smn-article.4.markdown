---
layout: post
title: "그러려니 하고 넘어갔던 스프링 개념들"
subtitle: ""
date: 2016-01-18 19:25:00
author: "smnkim"
header-img: "img/smnkim.jpg"
---



### 그러려니 하고 넘어갔던 스프링 개념들
----

1. 왜 인터페이스를 설계해서 사용하는거지?
    토비의 스프링책에 아주 명확하게 이유가 잘 설명되어 있었다!
    그 책을 바탕으로 내용을 정리해 보자면, 두 개의 클래스가 서로 긴밀하게 연결되어 있다면 특정 클래스와 그 코드에 종속되어 버린다.
    코드에 종속 된다는 말은 자유롭게 확장하기가 힘들다는 뜻이다.
    따라서 가장 좋은 해결책은 두 개의 클래스가 서로 긴밀하게 연결되어 있지 않도록 중간에 느슨한 연결고리를 만들어주는 것이다.
    인터페이스를 도입하게 되면 얻을 수 있는 가장 큰 잇점은 앞으로 어떤 클래스를 사용하게 될 것인지 몰라도 된다는 의미이다.

    이후 관계설정을 책임지는 스프링 컨테이너 역할에 대해서는 생략하도록 하겠다.


2. 오타 하나만 나면 컴파일도 안되는데 XML을 도대체 왜 사용하는거야!
    처음 스프링으로 웹 개발을 했을 당시에 환결 설정하는데만 며칠이 걸렸던 것 같다. 오타를 찾겠다고 눈알 빠지도록 XML을 읽었었다.
    하지만 토비의 스프링을 읽고, 자바 코드와 1:1 매칭시켜 주면서 XML문서를 만드는 과정을 따라가다 보니, 어느새 XML문서가 술술 읽히게 되었다.
    자바코드 |자바코드 | XML
    ----------|----------|-----------
    빈 설정 파일|@Configuration     | <beans>
    빈의 이름|@Bean methodName()     | <bean id="methodName"
    빈의 클래스|return new BeanClass();    | class="a.b.c...BeamClass">

+ property 태크의 ref와 value의 차이점
	+ ref : 주입할 오브젝트를 정의한 빈의 ID를 입력한다.
	+ value : 단순 값을 주입할 때 사용한다.

    완성된 XML 코드를 보니 자바코드 보다 훨씬 간결하고, 읽기 쉬었다. 신기했다.
    

